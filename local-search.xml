<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/09/01/kotlin%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8A@jvmoverloads/"/>
    <url>/2022/09/01/kotlin%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8A@jvmoverloads/</url>
    
    <content type="html"><![CDATA[<h1 id="kotlin构造函数以及-jvmoverloads"><a href="#kotlin构造函数以及-jvmoverloads" class="headerlink" title="kotlin构造函数以及@jvmoverloads"></a>kotlin构造函数以及@jvmoverloads</h1><h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><p>Kotlin构造函数跟java构造函数写法上略有不同，kotlin构造函数分为主构造函数跟次级构造函数。</p><ul><li>如果我们用java定一个自定义View，构造函数会这样写</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomTextView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TextView</span> &#123;<br>    <span class="hljs-comment">//不分主次构造函数，根据需要选择对应参数个数的构造函数</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomTextView</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context);<br>    &#125;<br>    <br>    <span class="hljs-comment">//如果是直接在xml中使用该组件，则XmlParser在解析布局时会反射调用该构造函数，attrs是用来解析CustomView在xml布局中的参数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomTextView</span><span class="hljs-params">(Context context, <span class="hljs-meta">@Nullable</span> AttributeSet attrs)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, attrs);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomTextView</span><span class="hljs-params">(Context context, <span class="hljs-meta">@Nullable</span> AttributeSet attrs, <span class="hljs-type">int</span> defStyleAttr)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, attrs, defStyleAttr);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomTextView</span><span class="hljs-params">(Context context, <span class="hljs-meta">@Nullable</span> AttributeSet attrs, <span class="hljs-type">int</span> defStyleAttr, <span class="hljs-type">int</span> defStyleRes)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, attrs, defStyleAttr, defStyleRes);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>用Kotlin写构造函数，则需要区分主、次构造函数</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">//主构造函数是类头的一部分，主构造函数关键字constructor可以省略</span><br><span class="hljs-keyword">class</span> <span class="hljs-symbol">Person</span> <span class="hljs-symbol">constructor</span>(<span class="hljs-symbol">val</span> <span class="hljs-symbol">name: <span class="hljs-symbol">String</span>, <span class="hljs-symbol">val</span></span> <span class="hljs-symbol">age: <span class="hljs-symbol">Int</span></span>)<br>//根据需要还可以对构造函数设置可见行<br><span class="hljs-symbol">class</span> <span class="hljs-symbol">Person</span> <span class="hljs-symbol">private</span> <span class="hljs-symbol">constructor</span>(<span class="hljs-symbol">val</span> <span class="hljs-symbol">name: <span class="hljs-symbol">String</span>, <span class="hljs-symbol">val</span></span> <span class="hljs-symbol">age: <span class="hljs-symbol">Int</span></span>)<br><br></code></pre></td></tr></table></figure><p>kotlin的类除了有一个主构造函数外还可以有多个次级构造函数，次级构造函数constructor关键字不可以省略</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-title function_">constructor</span>(<span class="hljs-params">val name: <span class="hljs-built_in">String</span>, val age: Int</span>) &#123;<br><br><span class="hljs-comment">//次构造函数1</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">val name: <span class="hljs-built_in">String</span>, age: Int, gender: <span class="hljs-built_in">String</span></span>)<br><span class="hljs-comment">//次构造函数2</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">String</span>, age: Int, gender: <span class="hljs-built_in">String</span>, education: <span class="hljs-built_in">String</span></span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码在编写时，idea会提示错误</p><p><img src="/images/kotlin_counstructor1.png"></p><p>意思是我们定义的次构造函数没有调用到主构造函数。正确的写法应该是这样:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Person</span> <span class="hljs-symbol">constructor</span>(<span class="hljs-symbol">val</span> <span class="hljs-symbol">name: <span class="hljs-symbol">String</span>, <span class="hljs-symbol">val</span></span> <span class="hljs-symbol">age: <span class="hljs-symbol">Int</span></span>) &#123;<br><span class="hljs-comment">//次级构造函数1中不允许用val、var声明定义成员变量，这在主构造函数中是允许的</span><br>    constructor(name: String, age: Int, gender: String) : <span class="hljs-keyword">this</span>(name, age)<br><span class="hljs-comment">//次级构造函数2</span><br>    constructor(name: String, age: Int, gender: String, education: String) : <span class="hljs-keyword">this</span>(name, age, gender)<br>&#125;<br></code></pre></td></tr></table></figure><p>可以理解成次级构造函数2需要调用次级构造函数1，次级构造函数1需要调用到主构造函数。</p><p><code>kotlin的主次构造函数的书写跟java的主要区别就在这个地方</code></p><ul><li>用kotlin定一个自定义View构造函数怎么书写呢？</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">CustomView</span>(<span class="hljs-symbol">context: <span class="hljs-symbol">Context</span>, <span class="hljs-symbol">attrs</span>: <span class="hljs-symbol">AttributeSet</span></span>?, <span class="hljs-symbol">defStyleAttr: <span class="hljs-symbol">Int</span></span>) :<br>    <span class="hljs-symbol">AppCompatTextView</span>(<span class="hljs-symbol">context, <span class="hljs-symbol">attrs</span>, <span class="hljs-symbol">defStyleAttr</span></span>) &#123;<br><br>    constructor(context: Context, attrs: AttributeSet?) : <span class="hljs-keyword">this</span>(context, attrs, <span class="hljs-number">0</span>)<br><br>    constructor(context: Context) : <span class="hljs-keyword">this</span>(context, <span class="hljs-literal">null</span>)<br>&#125;<br><br><span class="hljs-comment">//由于定义了主构造函数，所有的次级构造函数都需要委托到主构造函数上，那我们想要在构造函数中调用父类的构造函数应该怎么写？</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-symbol">CustomView</span> : <span class="hljs-symbol">AppCompatTextView</span> &#123;<br>    <span class="hljs-comment">//不在类声明处定义主构造函数就不需要委托</span><br>    constructor(context: Context, attributeSet: AttributeSet?, defStyleAttr: Int): <span class="hljs-keyword">super</span>(context, attributeSet, defStyleAttr) &#123;<br>        <br>    &#125;<br>    <br>    constructor(context: Context, attributeSet: AttributeSet?): <span class="hljs-keyword">this</span>(context, attributeSet, <span class="hljs-number">0</span>) &#123;<br>        <br>    &#125;<br>    <br>    constructor(context: Context): <span class="hljs-keyword">super</span>(context, <span class="hljs-literal">null</span>, <span class="hljs-number">0</span>) &#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JvmOverloads注解"><a href="#JvmOverloads注解" class="headerlink" title="@JvmOverloads注解"></a>@JvmOverloads注解</h2><p>这个注解的作用就是告诉kotlin编译器生成对应函数或者构造函数的参数重载，如果一个函数有n个参数，其中m个有默认值，则会额外生成m个重载构造函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>  &#123;<br>    <span class="hljs-meta">@JvmOverloads</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">test</span><span class="hljs-params">(name: <span class="hljs-type">String</span>, age: <span class="hljs-type">Int</span> = <span class="hljs-number">20</span>, gender: <span class="hljs-type">String</span> = <span class="hljs-string">&quot;male&quot;</span>)</span></span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>转换成java代码后是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>   <span class="hljs-meta">@JvmOverloads</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> String name, <span class="hljs-type">int</span> age, <span class="hljs-meta">@NotNull</span> String gender)</span> &#123;<br>      Intrinsics.checkNotNullParameter(name, <span class="hljs-string">&quot;name&quot;</span>);<br>      Intrinsics.checkNotNullParameter(gender, <span class="hljs-string">&quot;gender&quot;</span>);<br>   &#125;<br> <br>   <span class="hljs-meta">@JvmOverloads</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> String name, <span class="hljs-type">int</span> age)</span> &#123;<br>      test$<span class="hljs-keyword">default</span>(<span class="hljs-built_in">this</span>, name, age, (String)<span class="hljs-literal">null</span>, <span class="hljs-number">4</span>, (Object)<span class="hljs-literal">null</span>);<br>   &#125;<br><br>   <span class="hljs-meta">@JvmOverloads</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> String name)</span> &#123;<br>      test$<span class="hljs-keyword">default</span>(<span class="hljs-built_in">this</span>, name, <span class="hljs-number">0</span>, (String)<span class="hljs-literal">null</span>, <span class="hljs-number">6</span>, (Object)<span class="hljs-literal">null</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用jvmoverloads实现的自定义view函数是这样的</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">class</span> CustomView @JvmOverloads <span class="hljs-function"><span class="hljs-keyword">constructor</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = android.R.attr.textViewStyle</span></span><br><span class="hljs-params"><span class="hljs-function">)</span> :</span> AppCompatTextView(context, attrs)<br><br><span class="hljs-comment">//用该注解自动生成重载时尤其要注意defStyleAttr不要忘记赋值了，否则该组件对应的默认style样式就会丢失从而产生一些bug</span><br><span class="hljs-keyword">class</span> CustomView @JvmOverloads <span class="hljs-function"><span class="hljs-keyword">constructor</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0</span></span><br><span class="hljs-params"><span class="hljs-function">)</span> :</span> AppCompatTextView(context, attrs)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/08/31/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/08/31/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ul><li>解决git clone 慢 git config –global url.”<a href="https://hub.fastgit.xyz/&quot;.insteadof">https://hub.fastgit.xyz/&quot;.insteadof</a> <a href="https://github.com/%E6%9B%BF%E6%8D%A2%E9%95%9C%E5%83%8F">https://github.com/替换镜像</a></li><li>git push  authentication was removed on august，git提交认证时已不再支持通过密码认证，即使本地ssh公钥注册到github上也不行。在git提交输入密码时要输入验证的token而不是GitHub account的密码，token在github个人页&#x2F;S ettings&#x2F;Developer settings&#x2F;Person access tokens处生成。可设置该token永不过期。</li></ul><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><ul><li>open . 打开terminal内当前文件夹</li></ul><h2 id="adb"><a href="#adb" class="headerlink" title="adb"></a>adb</h2><ul><li><p>adb shell ps|grep packageName</p><p>adb shell ps|findstr packageName</p><p>adb am force-stop packageName</p><p>adb shell dumpsys activity top | grep ACTIVITY</p><p>adb shell am start -n applicationId&#x2F;component</p><p>adb shell dumpsys activity activities | grep Run #</p><p>adb shell dumpsys activity activities |grep -E ‘stack|TaskRecord|Hist’</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
